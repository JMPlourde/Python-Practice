#The following iterative sequence is defined for the set of positive integers:
 #n → n/2 (n is even)
 #n → 3n + 1 (n is odd)
 #Using the rule above and starting with 13, we generate the following sequence:
 #13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
 #It can be seen that this sequence (starting at 13 and finishing at 1) contains 
 # 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
 # Which starting number, under one million, produces the longest chain?
 # FYI Once the chain starts the terms are allowed to go above one million.
 
from timeit import default_timer as timer
 
start = timer()
 
def stupidname(dictionary,number,l):
    if number!=1:
        if number not in dictionary:
            number = Collatzseq(number)
            l+=1
            return stupidname(dictionary,number,l)
        else: l += dictionary[number]
    return l
 
 
def Collatzseq(n):
    if n%2==0:
        return n/2
    else:
        return 3*n+1
      
 
def maxCollatzlist(x):
    y = 0
    z = 0
    length = 1
    collatzdict={}
    totallistlength = 0
    for i in range (1,x+1):
        if i not in collatzdict:
            collatzdict[i] = stupidname(collatzdict, i,length)
            totallistlength = stupidname(collatzdict,i,length)
        else:
            totallistlength = collatzdict[i]
        if totallistlength >= y:
            y = totallistlength
            z = i
    return y,z
print(maxCollatzlist(1000000))
